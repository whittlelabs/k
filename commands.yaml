common_arguments: &common_arguments
  prompt:
    help: "Text to generate pull request changes"
    positional: true
    nargs: "?"
  stdin:
    help: "Read prompt from stdin instead of an argument"
    flag: true
  paste:
    help: "Read prompt from the clipboard instead of an argument or stdin"
    flag: true
  copy:
    help: "Copy the generated prompt to the clipboard instead of invoking the LLM"
    flag: true
  verbose:
    help: "If set, print verbose debug output to the console"
    flag: true
  include:
    help: "Override include patterns with a pipe-delimited list of glob patterns, e.g. '*.yaml|*.json|*.html'"

commands:
  init:
    help: "Initialize .k directory with configuration templates."
    target: "@init.init_k_use_case.execute"
    arguments:
      template: "Alias of the template to use for initialization (e.g., nodejs, nextjs, python, dotnet)"

  get:
    help: "Get some resource"
    subcommands:
      openai:
        help: "Get an OpenAI resource"
        subcommands:
          models:
            help: "Get the list of available models"
            target: "@openai.client.get_models"
            print_result: true
            print_map:
              format: table
              columns:
                - id
              order_by: id
      anthropic:
        help: "Get an Anthropic resource"
        subcommands:
          models:
            help: "Get the list of available Anthropic models"
            target: "@anthropic.client.get_models"
            print_result: true
            print_map:
              format: table
              columns:
                - id
              order_by: id

  traceback:
    aliases: ["tb"]
    help: "Build a troubleshooting prompt from a traceback on the clipboard"
    target: "@traceback.build_troubleshooting_prompt_use_case.execute"
  pr:
    help: "Generate pull request changes based on a prompt. Use the --copy flag to copy the generated prompt to the clipboard instead of invoking the LLM."
    target: "@agency.create_pull_request_use_case.execute"
    arguments:
      <<: *common_arguments
      followup:
        help: "If set, append to memory file and include its contents in the LLM prompt for incremental updates."
        flag: true
  advise:
    help: "Generate code advice for the project"
    target: "@agency.get_code_advice_use_case.execute"
    arguments:
      <<: *common_arguments
      followup:
        help: "If set, append to memory file and include its contents in the LLM prompt for incremental updates."
        flag: true
  plan:
    help: "Generate project plan based on a prompt by creating user stories. Use the --copy flag to copy the generated plan prompt to the clipboard instead of invoking the LLM."
    target: "@agency.create_project_plan_use_case.execute"
    arguments:
      <<: *common_arguments
  add:
    help: "Add entries to project configuration files."
    subcommands:
      rule:
        help: "Append a rule to .k/rules.txt."
        target: "@agency.add_rule_use_case.execute"
        arguments:
          rule:
            help: "The rule text to be added to .k/rules.txt."
            positional: true
  implement:
    help: "Implement changeset from clipboard. Reads a structured changeset response and applies the changes."
    target: "@agency.implement_changeset_use_case.execute"
    arguments:
      verbose:
        help: "Print verbose debug output to the console"
        flag: true
